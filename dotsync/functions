#!/bin/bash

# Syntax: dotfile_sourceupdate <github repo> <name> [fileA, fileB, ...]
function dotfile_sourceupdate
{
	echo 
	echo "-----[ DOTFILES SOURCE UPDATE ]-----"
	echo "Updating $2 from github..."
	if [ ! -d "$HOME/.source/$2" ]; then
		mkdir $HOME/.source/$2 -p
		cd $HOME/.source/$2
		git clone $1 .
		make
		for FILE in "${@:3}"; do
			if [ -f $HOME/.source/$2/$FILE ]; then
				cp -u $HOME/.source/$2/$FILE $HOME/.bin
			fi
		done
	else
		cd $HOME/.source/$2
		git pull | tee /tmp/sourcefileupdate-log
		if ! grep -Fxq "Already up-to-date." "/tmp/sourcefileupdate-log"; then
			make
			for FILE in "${@:3}"; do
				if [ -f $HOME/.source/$2/$FILE ]; then
					cp -u $HOME/.source/$2/$FILE $HOME/.bin
				fi
			done
		fi
	fi
}


# Syntax: dotfile_symlink <source> <dest>
function dotfile_symlink
{
	# Check if the source file or folder exists
	if [ ! -d $1 ] && [ ! -f $1 ]; then
		echo "dotfile_symlink error: The source file $1 does not exists!"
		return
	fi

	# Check if the symlink exists
	if [ ! "$(readlink $2)" = "$1" ]; then
		# If the destination already exists, ask the user to move the files
		if [ -d $2 ] || [ -f $2 ]; then
			echo 
			echo "-----[ DOTFILES SYMLINK WARNING ]-----"
			echo "Symlink issue detected, do you want to move your current file or folder"
			echo "$2 moved to $HOME/.dotfiles/backup/"
			read -p "so we can continue updating the dotfiles (y/N)" -n 1 -r
			echo
			[[ ! $REPLY =~ ^[Yy]$ ]] && return
			mv $2 $HOME/.dotfiles/backup/
		fi

		# Create the symlink
		ln -s $1 $2
	fi
}

# Syntax: dotfile_set <file> <key> <value>
function dotfile_set
{
	echo $1

	[ ! -f $1 ] && touch $1

	if grep -q "^$2=" "$1"; then
		sed "s/^$2=.*/$2=$3/" -i $1
	else
		echo "$2=$3" >> $1
	fi
}

# Syntax: dotfile_get <file> <key>
function dotfile_get
{
	[ -f $1 ] && grep -oP "$2=\K.*" $1
}
